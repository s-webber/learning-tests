package com.example;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.fail;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.junit.Test;

public class ExampleTest {
   private static final ExampleEnum TARGET_STRING_TO_ENUM = ExampleEnum.QWERTY;
   private static final Date SOURCE_DATE_TO_STRING = toDate("20170218");
   private static final List<String> SOURCE_STRING_LIST = Arrays.asList("32");
   private static final String SOURCE_STRING_TO_DATE = "20121130";
   private static final String SOURCE_STRING_TO_INTEGER = "1";
   private static final String SOURCE_STRING_TO_STRING = "abc";
   private static final String SOURCE_NAME_NOT_IN_TARGET = "xyz";
   private static final String SOURCE_STRING_TO_ENUM = "QWERTY";
   private static final double SOURCE_DOUBLE_TO_STRING = 134.1275;
   private static final String TARGET_DATE_TO_STRING = "18/02/2017";
   private static final String TARGET_DOUBLE_TO_STRING = "00,01,34.13";
   private static final List<BigDecimal> TARGET_BIG_DECIMAL_LIST = Arrays.asList(new BigDecimal("32"));
   private static final Date TARGET_STRING_TO_DATE = toDate(SOURCE_STRING_TO_DATE);
   private static final Integer TARGET_STRING_TO_INTEGER = new Integer(1);
   private static final String DEFAULT_VALUE = "using default value";
   private static final String CONSTANT_VALUE = "using constant value";

   /** Check all get methods of object generated by mapper. */
   @Test
   public void allTargetGetters() {
      ExampleSource s = createSource();

      ExampleTarget t = toSource(s);

      assertEquals(TARGET_DATE_TO_STRING, t.getDateToStringExample());
      assertEquals(TARGET_DOUBLE_TO_STRING, t.getDoubleToStringExample());
      assertEquals(SOURCE_NAME_NOT_IN_TARGET, t.getNameNotInSource());
      assertEquals(TARGET_BIG_DECIMAL_LIST, t.getStringListToBigDecimalListExample());
      assertEquals(TARGET_STRING_TO_DATE, t.getStringToDateExample());
      assertEquals(TARGET_STRING_TO_INTEGER, t.getStringToIntegerExample());
      assertEquals(SOURCE_STRING_TO_STRING, t.getStringToStringExample());
      assertEquals(TARGET_STRING_TO_ENUM, t.getStringToEnum());
      assertEquals(DEFAULT_VALUE, t.getDefaultValue());
      assertEquals(CONSTANT_VALUE, t.getConstantValue());
   }

   /** Confirm the input to the mapper remains unaltered by the mapping process. */
   @Test
   public void confirmSourceUnaltered() {
      ExampleSource s = createSource();

      toSource(s);

      assertEquals(SOURCE_DATE_TO_STRING, s.getDateToStringExample());
      assertEquals(SOURCE_DOUBLE_TO_STRING, s.getDoubleToStringExample(), 0);
      assertEquals(SOURCE_NAME_NOT_IN_TARGET, s.getNameNotInTarget());
      assertEquals(SOURCE_STRING_LIST, s.getStringListToBigDecimalListExample());
      assertEquals(SOURCE_STRING_TO_DATE, s.getStringToDateExample());
      assertEquals(SOURCE_STRING_TO_INTEGER, s.getStringToIntegerExample());
      assertEquals(SOURCE_STRING_TO_STRING, s.getStringToStringExample());
      assertEquals(SOURCE_STRING_TO_ENUM, s.getStringToEnum());
      assertNull(s.getDefaultValue());
      assertNull(s.getConstantValue());
   }

   /** Confirm default value is only used when no value is specified for it in the source object. */
   @Test
   public void notUsingDefaultValue() {
      ExampleSource s = createSource();
      String notDefaultValue = "not using default value";
      s.setDefaultValue(notDefaultValue);

      assertNotEquals(DEFAULT_VALUE, toSource(s).getDefaultValue());
      assertEquals(notDefaultValue, toSource(s).getDefaultValue());
   }

   /** Confirm default value is used even when a different value is specified for it in the source object. */
   @Test
   public void constantValue() {
      ExampleSource s = createSource();
      String notConstantValue = "not using constant value";
      s.setConstantValue(notConstantValue);

      assertEquals(CONSTANT_VALUE, toSource(s).getConstantValue());
      assertNotEquals(notConstantValue, toSource(s).getConstantValue());
   }

   /** Confirm exception if a String representation of an enum does not match a value of the target enum. */
   @Test
   public void invalidEnumName() {
      ExampleSource s = createSource();
      s.setStringToEnum("qwerty");

      Exception expected = new IllegalArgumentException("No enum constant com.example.ExampleEnum.qwerty");
      assertException(expected, () -> toSource(s));
   }

   /** Confirm exception if a String representation of a date is in an invalid format. */
   @Test
   public void unparseableDate() {
      ExampleSource s = createSource();
      // set an invalid formatted date ("stringToDateExample" has been configured to expect dates in the format "yyyyMMdd")
      s.setStringToDateExample("18/02/2017");

      Exception expected = new RuntimeException("java.text.ParseException: Unparseable date: \"18/02/2017\"");
      assertException(expected, () -> toSource(s));
   }

   /**
    * Confirm no exception if a String representation of a date contains an invalid day/month combination.
    * <p>
    * It appears that MapStruct's default date parsing is lenient.
    */
   @Test
   public void lenientDateParsing() {
      ExampleSource s = createSource();
      // set an invalid date (there is no 30th of February)
      s.setStringToDateExample("20170230");

      ExampleTarget t = toSource(s);

      // rather than throw an exception the date is parsed as the 2nd March
      assertEquals(toDate("20170302"), t.getStringToDateExample());
   }

   private ExampleTarget toSource(ExampleSource s) {
      return ExampleMapper.INSTANCE.targetToSource(s);
   }

   private ExampleSource createSource() {
      ExampleSource s = new ExampleSource();
      s.setDateToStringExample(SOURCE_DATE_TO_STRING);
      s.setDoubleToStringExample(SOURCE_DOUBLE_TO_STRING);
      s.setNameNotInTarget(SOURCE_NAME_NOT_IN_TARGET);
      s.setStringListToBigDecimalListExample(SOURCE_STRING_LIST);
      s.setStringToDateExample(SOURCE_STRING_TO_DATE);
      s.setStringToIntegerExample(SOURCE_STRING_TO_INTEGER);
      s.setStringToStringExample(SOURCE_STRING_TO_STRING);
      s.setStringToEnum(SOURCE_STRING_TO_ENUM);
      return s;
   }

   private static Date toDate(String yyyyMMdd) {
      try {
         SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd");
         df.setLenient(false);
         return df.parse(yyyyMMdd);
      } catch (ParseException e) {
         throw new RuntimeException(e);
      }
   }

   private void assertException(Exception expected, Runnable r) {
      try {
         r.run();
         fail();
      } catch (Exception actual) {
         assertSame(expected.getClass(), actual.getClass());
         assertEquals(expected.getMessage(), actual.getMessage());
      }
   }
}
